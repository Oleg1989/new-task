import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';

import { fetchMatrix } from './matrixAPI';
import { MatrixState } from '../../app/interface/interfaceMatrixState';
import { ArrayStrings } from '../../app/interface/interfaceArrayStrings';

const initialState: MatrixState = {
  M: 10,
  statusM: 'idle',
  N: 10,
  statusN: 'idle',
  X: 2,
  statusX: 'idle',
  arrayValue: [],
  statusArrayValue: 'idle',
  arraySum: [],
  statusArraySum: 'idle',
  arrayAverage: [],
  statusArrayAverage: 'idle',
  arrayInterest: [],
  statusArrayInterest: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'matrix/fetchMatrix',
//   async (amount: number) => {
//     const response = await fetchMatrix(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const matrixSlice = createSlice({
  name: 'matrix',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state, action: PayloadAction<{ perntId: string, childId: string }>) => {
      state.arrayValue.forEach(str => {
        if (str.id === action.payload.perntId) {
          str.string.forEach(val => {
            if (val.id === action.payload.childId) {
              val.amount = val.amount + 1;
            }
          });
        }
      });
    },
    addArrayValue: (state, action: PayloadAction<ArrayStrings[]>) => {
      state.arrayValue = [...action.payload];
    }

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});

export const { increment, addArrayValue } = matrixSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
//export const selectMatrix = (state: RootState) => state.matrix.value;

export const selectM = (state: RootState) => state.matrix.M;
export const selectN = (state: RootState) => state.matrix.N;
export const selectX = (state: RootState) => state.matrix.X;
export const selectArrayValue = (state: RootState) => state.matrix.arrayValue;

export default matrixSlice.reducer;
