import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import cuid from 'cuid';

import { fetchMatrix } from './matrixAPI';
import { MatrixState } from '../../app/interface/interfaceMatrixState';
import { ArrayStrings } from '../../app/interface/interfaceArrayStrings';
import { ArraySumValue } from '../../app/interface/interfaceArraySumValue';
import { Value } from '../../app/interface/interfaceValue';
import { Params } from '../../app/interface/interfaceParams';

const initialState: MatrixState = {
  M: 5,
  statusM: 'idle',
  N: 5,
  statusN: 'idle',
  X: 2,
  statusX: 'idle',
  arrayValue: [],
  statusArrayValue: 'idle',
  arraySum: [],
  statusArraySum: 'idle',
  arrayAverage: [],
  statusArrayAverage: 'idle',
  arrayInterest: [],
  statusArrayInterest: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'matrix/fetchMatrix',
//   async (amount: number) => {
//     const response = await fetchMatrix(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const matrixSlice = createSlice({
  name: 'matrix',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state, action: PayloadAction<string>) => {
      state.arrayValue.forEach(str => {
        str.string.forEach(val => {
          if (val.id === action.payload) {
            val.amount = val.amount + 1;
          }
        });
      });
      state.arrayValue.forEach(str => {
        str.string.forEach(val => {
          if (action.payload === val.id) {
            state.arraySum.forEach(sum => {
              if (sum.id === str.id) {
                sum.amount = sum.amount + 1;
              }
            });
          }
        });
      });
      let arr: number[] = [];
      state.arrayValue.forEach((str, index) => {
        if (index === 0) {
          str.string.forEach((val, i) => {
            arr[i] = val.amount;
          });
        } else {
          str.string.forEach((val, i) => {
            arr[i] += val.amount;
          });
        }
      });
      arr.forEach((val, index) => {
        state.arrayAverage[index] = val / state.N;
      });
    },
    initializeParameters: (state, action: PayloadAction<Params>) => {
      state.M = action.payload.M;
      state.N = action.payload.N;
      state.X = action.payload.X;

      for (let i = 0; i < state.M; i++) {
        let arrayAmount: Value[] = [];
        for (let j = 0; j < state.N; j++) {
          arrayAmount.push({
            id: cuid(),
            amount: Math.floor(Math.random() * (999 - 100 + 1)) + 100,
          });
        }
        state.arrayValue.push({
          id: cuid(),
          string: arrayAmount,
        });
      }

      state.arrayValue.forEach(str => {
        let sum: number = 0;
        str.string.forEach(val => { sum += val.amount });
        state.arraySum.push({
          id: str.id,
          amount: sum
        });
      });

      let arr: number[] = [];
      state.arrayValue.forEach((str, index) => {
        if (index === 0) {
          str.string.forEach((val, i) => {
            arr[i] = val.amount;
          });
        } else {
          str.string.forEach((val, i) => {
            arr[i] += val.amount;
          });
        }
      });
      arr.forEach(val => {
        state.arrayAverage.push(val / state.N);
      });
    },
    deleteStr: (state, action: PayloadAction<string>) => {
      state.arrayValue = [...state.arrayValue.filter(str => str.id !== action.payload)];
      state.M = state.M - 1;
      state.arrayAverage.length = 0;
    }

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});

export const { increment, initializeParameters, deleteStr } = matrixSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
//export const selectMatrix = (state: RootState) => state.matrix.value;

export const selectM = (state: RootState) => state.matrix.M;
export const selectN = (state: RootState) => state.matrix.N;
export const selectX = (state: RootState) => state.matrix.X;
export const selectArrayValue = (state: RootState) => state.matrix.arrayValue;
export const selectArraySum = (state: RootState) => state.matrix.arraySum;
export const selectArrayAverage = (state: RootState) => state.matrix.arrayAverage;

export default matrixSlice.reducer;
